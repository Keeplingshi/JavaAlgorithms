package com.main.JianzhiOffer.day14;

/**
 * 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 * @author chenbin
 *
 */
public class Question2 {

	public static void main(String[] args) {
		System.out.println(new Question2().Add(5, 3));
	}

	/**
	 * 分析：考察位运算
	 * java中提供的位运算有：左移(<<)、右移(>>)、无符号右移(>>>)、位与(&)、位或(|)、位非(~)、位异或(^)
	 * 
	 * 左移(<<)：      5<<2    将5左移2位，二进制形式  101-->10100   因此  5<<2 等于20
	 * 
	 * 右移(>>)：      5>>2    将5右移2位，二进制形式  101-->001  高位补零    因此  5<<2 等于1
	 * 
	 * 无符号右移(>>>)
	 * 
	 * 位与(&)：第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0
	 *  5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
		3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
		1转换为二进制：0000 0000 0000 0000 0000 0000 0000 0001
		因此  （5&3） 结果是 1
	 * 
	 * 位或(|)：第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
	 * 	5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
		3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
		7转换为二进制：0000 0000 0000 0000 0000 0000 0000 0111
		因此  (5|3) 结果是 7
	 * 
	 * 位非(~) ：操作数的第n位为1，那么结果的第n位为0，反之。
 		5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
	   -6转换为二进制：1111 1111 1111 1111 1111 1111 1111 1010
	   	因此 ~5 结果是-6
	 * 
	 * 位异或(^): 第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
	 *  5转换为二进制：0000 0000 0000 0000 0000 0000 0000 0101
		3转换为二进制：0000 0000 0000 0000 0000 0000 0000 0011
		6转换为二进制：0000 0000 0000 0000 0000 0000 0000 0110
		因此 (5^3) 结果是  6
		
	 * @param num1
	 * @param num2
	 * @return
	 */
    public int Add(int num1,int num2) {
        if(num2==0){
        	return num1;
        }
        int s=num1^num2;
        int t=(num1&num2)<<1;
        System.out.println(s+"\t"+t);
        return Add(s,t);
    }
	
}
