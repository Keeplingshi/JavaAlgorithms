package com.main.wangyileihuopangu;

import java.util.Scanner;

/**
 * 	在一个N*N的数组中寻找所有横，竖，左上到右下，右上到左下，四种方向的直线连续D个数字的和里面最大的值 
	输入描述:
		每个测试输入包含1个测试用例，第一行包括两个整数 N 和 D :
		3 <= N <= 100
		1 <= D <= N
		接下来有N行，每行N个数字d:
		0 <= d <= 100
	
	输出描述:
		输出一个整数，表示找到的和的最大值
	
	输入例子1:
		4 2
		87 98 79 61
		10 27 95 70
		20 64 73 29
		71 65 15 0
	
	输出例子1:
		193
 * @author chenbin
 *
 */
public class Question2 {

	public static void main(String[] args)
	{
		String str="54 51 3 98 99 46 49 79 23 48 13 88 49 50 56 78 71 44 83 60 16 8 1 3 99 6 60 59 41 29 29 46 38 77 71 22 69 21 38 33 23 68 67 63 25 43 58 32 82 54 22 0 22 21 47 69 90 40 30 66 45 13 73 40 73 60 41 84 26 85 75 71 17 34 89 38 90 41 73 27 74 56 84 40 69 39 41 44 5 84 32 31 89 7 93 20 64 56 16 30 24 27 17 23 85 50 68 86 82 23 26 27 26 92 43 6 76 69 33 93 44 3 92 4 82 95 46 13 42 96 40 65 37 22 11 29 14 13 55 34 30 100 2 43 52 55 86 58 14 27 80 76 84 56 92 46 6 78 41 71 50 63 27 47 30 76 88 85 59 100 65 56 95 52 59 22 95 70 21 48 40 40 25 90 5 36 81 13 42 21 12 100 40 46 8 73 70 66 85 68 46 0 45 87 18 80 50 32 21 45 35 90 39 21 72 80 25 93 62 75 59 76 28 53 17 92 84 76 31 74 56 67 37 14 7 76 83 1 55 63 8 53 47 63 46 76 42 24 11 82 33 14 76 92 50 37 13 86 20 10 70 2 54 94 93 16 56 43 32 13 78 78 19 9 22 33 40 21 57 12 46 68 100 40 90 42 57 75 92 95 13 24 4 19 31 14 46 97 71 36 88 45 76 63 77 23 43 29 83 91 25 70 42 9 85 34 27 69 99 34 48 30 52 81 71 13 53 78 62 33 70 44 98 63 93 99 37 25 56 61 88 52 19 45 35 61 31 32 25 58 1 62 26 67 77 42 61 80 21 60 35 38 81 3 60 91 15 18 57 86 63 72 47 15 40 8 93 6 90 15 91 5 22 88 94 31 76 100 8 78 73 1 2 72 100 23 94 26 80 13 67 29 3 68 42 37 74 25 57 90 74 36 15 20 24 87 7 0 94 91 89 63 39 95 27 0 53 54 2 16 30 9 31 63 4 8 13 63 55 6 41 40 29 44 5 97 79 82 69 49 93 15 71 69 23 65 68 66 51 48 79 2 1 27 58 61 71 95 34 52 14 58 43 98 94 45 22 56 86 77 44 23 43 22 30 54 62 39 20 57 84 4 33 47 1 41 92 14 33 39 62 43 64 41 19 2 10 57 26 46 7 13 29 92 99 12 29 34 1 27 65 76 76 35 11 38 65 16 14 16 75 81 33 70 96 52 56 21 87 90 66 68 85 100 44 60 76 95 81 70 11 37 17 87 5 28 77 66 45 18 7 10 27 8 22 87 3 83 91 4 27 29 66 65 17 19 13 95 32 67 0 58 60 63 54 70 32 56 40 33 98 69 36 94 8 54 100 8 76 67 41 50 27 15 53 26 53 100 29 25 64 97 69 7 28 51 2 0 53 68 61 38 18 62 80 60 33 64 19 18 20 100 41 44 68 51 79 24 10 40 45 39 46 12 8 3 42 61 41 96 34 25 68 76 65 80 56 32 46 64 93 62 5 31 86 93 59 74 14 91 82 13 42 46 70 99 22 36 28 99 74 94 1 5 6 89 4 64 78 94 9 30 92 27 78 92 7 67 46 83 53 60 27 52 82 20 6 39 28 89 87 0 69 15 55 36 63 0 2 15 12 100 34 76 69 24 74 30 79 84 21 47 75 82 12 85 60 37 59 20 18 84 31 85 75 43 74 96 94 80 46 56 4 71 20 76 47 36 52 71 42 58 28 55 89 97 81 10 95 19 22 88 0 74 46 12 84 30 27 3 66 96 82 18 32 16 43 34 15 22 91 80 66 14 45 14 6 74 14 50 83 58 81 93 91 91 14 60 38 7 39 31 44 87 0 51 58 46 89 4 74 0 33 42 36 25 2 47 86 38 76 48 93 82 15 47 26 5 48 45 59 66 10 98 32 62 88 34 83 44 56 67 70 48 97 54 23 79 48 85 77 41 99 77 74 83 87 55 64 100 8 0 66 60 12 24 73 53 14 41 45 53 89 47 69 35 89 36 18 55 9 20 96 40 24 70 98 48 53 69 46 66 73 43 18 19 40 9 63 88 21 82 28 50 39 23 100 69 80 60 20 98 60 44 84 48 13 71 26 14 98 90 63 32 100 85 81 72 67 76 5 84 2 62 3 29 4 38 74 19 31 79 99 12 77 92 9 45 5 6 90 70 38 98 35 54 88 18 30 40 97 21 31 94 78 45 73 93 22 51 25 34 56 82 26 82 57 57 76 43 87 18 93 19 16 87 49 44 7 45 99 7 93 49 19 52 58 93 64 44 67 73 84 71 4 60 3 93 56 94 33 15 75 3 3 14 13 56 75 70 43 80 42 70 88 33 59 13 88 90 12 67 79 33 99 5 89 7 98 96 30 37 23 42 33 60 9 93 85 23 90 52 83 60 21 36 2 6 39 39 98 45 4 21 81 10 14 4 83 10 0 35 34 84 48 5 17 80 61 24 13 25 77 53 73 75 41 19 62 84 62 59 41 50 10 49 72 66 71 0 43 79 97 12 44 55 67 10 16 58 99 35 50 11 36 99 51 100 6 83 53 46 81 10 30 92 87 76 3 20 30 86 6 49 79 91 96 96 5 7 3 3 32 63 23 37 42 32 10 35 80 53 53 43 90 22 92 95 38 28 48 93 1 83 6 48 1 77 48 20 81 14 69 8 53 66 80 89 43 90 99 68 26 55 87 84 65 54 96 9 43 8 31 11 66 28 17 23 36 26 24 45 86 58 29 7 77 18 57 60 99 7 75 70 28 7 57 84 7 50 92 75 37 44 86 59 27 64 21 76 11 95 4 88 22 51 28 97 49 43 81 12 40 93 96 9 98 8 55 73 40 32 92 75 92 98 48 21 65 95 40 72 59 65 48 85 40 73 49 63 6 28 22 73 41 96 6 16 8 80 12 4 57 91 20 95 39 10 88 75 67 67 87 1 74 45 100 25 15 97 3 2 41 21 10 54 7 85 65 25 32 17 32 33 53 52 10 97 94 34 51 33 50 47 80 22 1 58 64 70 67 74 13 95 67 59 87 100 95 56 28 95 2 19 54 34 37 41 29 46 66 87 18 53 82 98 40 26 9 47 28 74 0 84 98 32 44 26 51 22 72 83 18 58 11 83 16 56 6 77 57 55 4 70 14 25 64 19 48 5 77 88 65 23 59 14 39 0 80 21 3 57 56 41 11 87 68 61 33 16 97 82 82 90 25 15 6 60 43 38 77 17 40 49 71 13 50 42 33 50 19 40 95 5 57 14 87 52 30 31 19 0 91 51 71 4 98 56 81 86 48 77 65 60 56 12 77 30 66 29 43 28 79 14 54 67 34 50 57 49 0 35 6 24 79 13 8 27 96 78 90 92 98 62 100 8 37 40 4 22 2 100 7 11 72 1 10 50 87 16 63 31 24 51 52 63 39 92 44 31 92 63 61 80 40 81 41 26 22 45 19 82 67 15 56 39 5 77 58 68 70 27 63 35 92 12 67 0 3 89 75 31 94 13 69 83 57 96 47 83 44 96 84 60 52 18 16 34 70 95 57 23 11 89 35 50 99 97 24 54 12 16 8 95 35 57 70 98 92 4 64 72 67 5 66 55 66 79 96 43 45 49 44 32 39 35 24 53 99 25 29 8 80 98 28 95 73 29 5 93 24 18 20 44 81 39 44 99 45 100 75 62 76 43 56 17 88 18 64 72 24 35 66 6 33 18 61 1 0 69 72 72 45 83 26 0 83 35 72 13 95 35 10 77 40 18 42 94 42 15 3 68 8 8 12 49 89 100 85 42 52 50 67 60 60 51 0 0 85 33 38 51 33 87 30 82 97 55 92 92 16 14 36 37 98 59 65 100 63 35 86 58 74 1 53 44 44 73 56 18 35 54 60 100 36 26 79 35 14 30 66 79 70 12 37 56 87 67 6 96 4 71 64 87 80 34 90 33 19 42 0 59 84 8 13 90 43 80 29 44 92 54 14 75 6 57 94 60 55 62 34 83 67 74 72 3 19 20 47 23 92 38 5 36 83 63 56 25 96 40 98 59 56 96 65 53 45 3 18 53 34 4 94 63 6 89 95 39 46 31 65 89 39 64 23 52 17 78 63 40 50 59 84 84 83 14 54 30 20 45 50 97 32 27 68 7 15 5 40 50 73 61 15 90 13 23 11 4 67 55 24 95 85 0 82 34 4 45 5 41 43 27 99 28 49 16 81 68 78 48 51 2 25 0 78 98 65 3 56 80 49 36 56 99 6 94 21 34 72 2 29 92 0 59 87 77 14 25 80 93 84 48 35 87 25 31 43 80 84 51 52 56 20 4 25 45 80 6 57 79 26 66 40 71 35 80 97 31 99 13 47 86 49 28 96 24 80 29 89 58 88 14 30 7 79 30 51 9 40 22 70 22 27 88 94 64 64 18 37 35 11 70 71 58 96 8 38 21 6 43 10 69 20 86 70 59 51 95 40 89 43 32 97 20 39 89 41 46 29 60 83 62 10 51 6 31 40 15 87 72 64 18 11 60 60 26 90 19 84 41 2 69 11 72 53 94 55 35 33 77 37 46 20 22 15 45 9 3 6 66 63 5 78 88 43 95 7 98 70 97 5 65 86 62 54 17 58 23 49 6 20 27 79 27 86 86 51 91 10 1 77 26 20 81 81 70 8 51 16 92 6 26 28 93 47 7 93 14 62 49 9 70 29 3 65 2 10 74 23 7 100 78 100 7 51 85 32 4 96 65 32 41 0 66 84 94 22 10 54 29 10 2 90 50 29 6 26 59 68 76 46 36 11 28 93 27 90 47 95 64 73 23 29 24 6 35 74 11 17 85 68 64 79 20 20 83 42 13 10 62 31 39 62 38 89 51 74 17 70 59 60 92 51 10 10 11 99 99 26 59 3 97 53 1 4 34 7 29 10 18 90 32 73 18 98 91 66 55 32 5 33 68 32 21 1 6 80 48 30 88 96 33 54 22 82 35 74 20 24 47 65 70 16 61 40 40 86 12 62 86 5 8 26 86 100 42 55 13 44 74 98 19 10 6 46 40 61 61 55 85 62 57 23 2 21 67 24 30 29 71 21 98 62 42 72 49 77 60 96 42 24 17 17 59 67 76 14 60 43 6 73 72 33 69 7 72 17 65 15 97 87 53 15 56 57 4 52 25 15 7 67 24 79 53 55 32 87 34 48 83 13 90 21 42 66 70 84 40 96 0 45 97 10 40 77 76 15 88 42 49 33 24 28 55 96 88 56 16 87 88 32 89 37 71 32 81 18 22 21 90 1 35 91 12 70 97 96 77 53 64 100 29 43 100 91 29 11 31 53 97 39 90 16 66 85 66 52 55 60 69 35 53 91 48 37 27 94 94 7 57 76 36 65 86 26 71 87 77 5 11 54 64 67 75 25 12 61 79 58 69 45 16 93 10 25 88 88 36 61 94 74 22 28 25 96 74 64 24 9 9 42 28 96 84 4 46 7 74 74 25 32 77 67 30 84 18 65 86 68 78 18 22 80 51 68 31 10 99 90 62 97 72 100 68 1 69 17 97 26 69 75 87 24 0";
		//String str="3 98 99 46 49 79 23 48 13 88 49 50 56 78 71 44 83 60 16 8 1 3 99 6 60 59 41 29 29 46 38 77 71 22 69 21 38 33 23 68 67 63 25 43 58 32 82 54 22 0 22 21 47 69";
		String[] strs=str.split(" ");
		int n=Integer.parseInt(strs[0]);
		int d=Integer.parseInt(strs[1]);
		
//		Scanner sc=new Scanner(System.in);
//		int n=sc.nextInt();
//		int d=sc.nextInt();
//		
		int array[][]=new int[n][n];
		System.out.println(strs.length);
		
		int p=2;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				array[i][j]=Integer.parseInt(strs[p++]);
//				array[i][j]=sc.nextInt();
			}
		}
		
		int res1=getMaxSum(array, n, d,true);
		
		int array2[][]=new int[n][n];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				array2[i][j]=array[j][i];
			}
		}
		int res2=getMaxSum(array2, n, d,false);
		
		System.out.println(res2>res1?res2:res1);
		
	}
	
	public static int getMaxSum(int[][] array,int n,int d,boolean flag )
	{
		int result=Integer.MIN_VALUE;
		if(flag)
		{
			//横
			for(int i=0;i<n;i++)
			{
				int[] arr=array[i];
				int res=getSumOfArray(arr,d);
				result=result>res?result:res;
			}
			//竖
			for(int i=0;i<n;i++)
			{
				int[] arr=new int[n];
				for(int j=0;j<n;j++){
					arr[j]=array[j][i];
				}
				
				int res=getSumOfArray(arr,d);
				result=result>res?result:res;
			}
		}
		
		//左上到右下
		//上半部分
		for(int k=0;k<=n-d;k++)
		{
			int[] arr=new int[n-k];
			for(int i=k,j=0;i<n;i++,j++)
			{
				arr[j]=array[j][i];
			}
			int res=getSumOfArray(arr,d);
			result=result>res?result:res;
		}
		
		//下半部分
		for(int k=1;k<=n-d;k++)
		{
			int[] arr=new int[n-k];
			for(int i=k,j=0;i<n;i++,j++)
			{
				arr[j]=array[i][j];
			}
			int res=getSumOfArray(arr,d);
			result=result>res?result:res;
		}
		return result;
	}
	
//	public static void printArray(int[] arr)
//	{
//		for(int i=0;i<arr.length;i++)
//		{
//			System.out.print(arr[i]+" ");
//		}
//		System.out.println();
//	}
	
	/**
	 * 找数组中连续d个最大和
	 * @param array
	 * @param d
	 */
	public static int getSumOfArray(int[] arr,int d)
	{
		if(d>arr.length){
			return Integer.MIN_VALUE;
		}
		
		int s=0;
		for(int i=0;i<d;i++){
			s+=arr[i];
		}
		int res=s;
		for(int i=d;i<arr.length;i++){
			s=s-arr[i-d]+arr[i];
			res=res>s?res:s;
		}
		
		return res;
	}
	
}
